name: Linkura-localify Patch Release

on:
  workflow_dispatch:
    inputs:
      linkura_version:
        description: 'Linkura version (optional)'
        required: false
        default: '手动'
      linkura_localify_version:
        description: 'Linkura-localify version (optional)'
        required: false
        default: '手动'
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 22

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client jq unzip wget

      - name: Determine versions
        run: |
          LINKURA_VERSION="${{ github.event.client_payload.linkura_version || github.event.inputs.linkura_version }}"
          LINKURA_LOCALIFY_VERSION="${{ github.event.client_payload.linkura_localify_version || github.event.inputs.linkura_localify_version }}"
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          RELEASE_BODY="Linkura version: ${LINKURA_VERSION}\nLinkura-localify version: ${LINKURA_LOCALIFY_VERSION}\nBuild date: ${DATE}"
          echo "LINKURA_VERSION=$LINKURA_VERSION" >> $GITHUB_ENV
          echo "LINKURA_LOCALIFY_VERSION=$LINKURA_LOCALIFY_VERSION" >> $GITHUB_ENV
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$LINKURA_VERSION-$LINKURA_LOCALIFY_VERSION" >> $GITHUB_ENV
          echo "Using Linkura version: $LINKURA_VERSION"
          echo "Using Linkura-localify version: $LINKURA_LOCALIFY_VERSION"

      - name: Write SSH Key
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa

      - name: Copy XAPK from server
        run: |
          scp -o StrictHostKeyChecking=no -i /tmp/id_rsa -P ${{ secrets.SERVER_PORT }} \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/linkura-localify-auto-release-web/data/latest.apk \
            ./app.xapk
          ls -lh app.xapk

      - name: Download linkura-localify apk
        run: |
          url=$(curl -s https://api.github.com/repos/ChocoLZS/linkura-localify/releases/latest \
            | jq -r '.assets[] | select(.name | test("linkura-localify-.*-debug-arm64-v8a\\.apk")) | .browser_download_url' \
            | head -n1)
          wget -O linkura-localify.apk "$url"
          ls -lh linkura-localify.apk

      - name: Expand XAPK
        run: unzip -o app.xapk -d app

      - name: Run APKEditor
        run: java -jar .github/lib/APKEditor.jar m -i app/

      - name: Run LSPatch
        run: |
          MERGED_APK=$(find . -maxdepth 1 -name "*_merged.apk" | head -n1)
          if [ -z "$MERGED_APK" ]; then
            echo "❌ 未找到 _merged.apk，检查 APKEditor 输出"
            exit 1
          fi
          echo "Found merged apk: $MERGED_APK"
          java -jar .github/lib/lspatch.jar "$MERGED_APK" -m linkura-localify.apk -o result
          LSPATCHED_APK=$(find result -type f -name '*.apk' | head -n1)
          if [ -z "$LSPATCHED_APK" ]; then
            echo "❌ 未找到 lspatched apk"
            exit 1
          fi
          echo "LSPATCHED_APK=$LSPATCHED_APK" >> $GITHUB_ENV

      - name: Rename files for release
        run: |
          INITIAL_XAPK="linkura_${LINKURA_VERSION}.xapk"
          LSPATCHED_APK_NAME="linkura_merged_lspatched_${LINKURA_VERSION}.apk"
          cp app.xapk "./$INITIAL_XAPK"
          cp "$LSPATCHED_APK" "./$LSPATCHED_APK_NAME"
          echo "RELEASE_XAPK=./$INITIAL_XAPK" >> $GITHUB_ENV
          echo "RELEASE_LSPATCHED=./$LSPATCHED_APK_NAME" >> $GITHUB_ENV
          ls -lh ./*.apk ./*.xapk

      - name: Delete existing tag and release
        run: |
          # 检查标签是否存在
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.RELEASE_TITLE }}$"; then
            echo "标签 ${{ env.RELEASE_TITLE }} 已存在，正在删除..."
            # 删除远程标签
            git push origin :refs/tags/${{ env.RELEASE_TITLE }}
            echo "已删除远程标签 ${{ env.RELEASE_TITLE }}"
          else
            echo "标签 ${{ env.RELEASE_TITLE }} 不存在，继续创建新发布"
          fi

      - name: Upload Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TITLE }}
          name: ${{ env.RELEASE_TITLE }}
          body: ${{ env.RELEASE_BODY }}
          artifacts: ${{ env.RELEASE_XAPK }},${{ env.RELEASE_LSPATCHED }}
          token: ${{ secrets.GITHUB_TOKEN }}
